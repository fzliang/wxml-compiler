main = ${ SOI ~ segment ~ EOI }

segment = ${ (tag | text_node)* }

// 标签
tag = ${
    "<"
    ~ (
        comment
        | wxs_script_tag_begin ~ WHITE_SPACE* ~ wxs_script_tag
        | tag_end ~ WHITE_SPACE*
        | tag_begin ~ WHITE_SPACE* ~ self_close?
    )
    ~ ">"
}
// 注释
comment = _{ "!--" ~ (!"-->" ~ ANY)* ~ "--" }

// wxs script 开始标签
wxs_script_tag_begin = ${
    &"wxs " ~ "wxs"
    | &"wxs\r" ~ "wxs"
    | &"wxs\n" ~ "wxs"
    | &"wxs\t" ~ "wxs"
    | &"wxs>" ~ "wxs"
}
// wxs script 结束标签
wxs_script_tag = ${
    (attr ~ WHITE_SPACE*)* ~ (
        ">" ~ wxs_script_body ~ "</wxs"
        | "/"
    )
}
// wxs script 标签 body
wxs_script_body = ${ (!"</wxs>" ~ (entity | pure_text))* }

tag_begin = ${ name ~ (WHITE_SPACE* ~ attr)* }
tag_end = ${ "/" ~ name }
self_close = ${ "/" }
name = @{ (ASCII_ALPHA | "_" | ":") ~ (ASCII_ALPHA | "_" | ":" | ASCII_DIGIT | "-" | ".")* }

// 标签属性
attr = ${ name ~ (&(WHITE_SPACE* ~ "=") ~ WHITE_SPACE* ~ "=" ~ WHITE_SPACE* ~ attr_value)? }
attr_value = ${
    "\"" ~ attr_value_q ~ "\""
    | "'" ~ attr_value_sq ~ "'"
    | attr_value_b
}
attr_value_q = ${ (!"\"" ~ text_entity)* }
attr_value_sq = ${ (!"\'" ~ text_entity)* }
attr_value_b = ${ (!WHITE_SPACE ~ text_entity)* }

// 文本
text_node = ${ text_entity ~ (!("<" | EOI) ~ text_entity)* }
text_entity = ${
    "{{" ~ WHITE_SPACE* ~ expr_or_obj ~ WHITE_SPACE* ~ "}}"
    | !"{{" ~ (entity | pure_text)
}
entity = @{ "&" ~ (
    "#x" ~ ASCII_HEX_DIGIT*
    | "#" ~ ASCII_DIGIT*
    | ASCII_ALPHA*
) ~ ";"?}
pure_text = @{ ANY }

WHITESPACE = _{ " " | "\r" | "\n" | "\t" }

// 表达式或者对象
expr_or_obj = !{ &(ident ~ (":" | ",") | spread) ~ obj_body | cond }
// 对象body
obj_body = { lit_obj_item ~ ("," ~ lit_obj_item )* }
// 三元表达式
cond = { or_expr ~ ("?" ~ cond ~ ":" ~ cond)? }

// 三元表达式符号
or_expr = { and_expr ~ (or ~ and_expr)* }
or = { "||" }
and_expr = { bit_or_expr ~ (and ~ bit_or_expr)* }
and = { "&&" }
bit_or_expr = { bit_xor_expr ~ (bit_or ~ bit_xor_expr)* }
bit_or = { !"||" ~ "|" }
bit_xor_expr = { bit_and_expr ~ (bit_xor ~ bit_and_expr)* }
bit_xor = { "^" }
bit_and_expr = { equal ~ (bit_and ~ equal)* }
bit_and = { !"&&" ~ "&" }
equal = { cmp ~ ((eq_full | ne_full | eq | ne) ~ cmp)* }
eq = { "==" }
ne = { "!=" }
eq_full = { "===" }
ne_full = { "!==" }
cmp = { plus_minus ~ ((lte | gte | lt | gt ) ~ plus_minus)* }
lt = { "<" }
gt = { ">" }
lte = { "<=" }
gte = { ">=" }

// + - & / %
plus_minus = { multi_div ~ ((plus | minus) ~ multi_div)* }
plus = { "+" }
minus = { "-" }
multi_div = { unary ~ ((multi | div | rem) ~ unary)* }
multi = { "*" }
div = { "/" }
rem = { "%" }

unary = { (reverse | bit_reverse | positive | negative) ~ unary | member }
reverse = { "!" }
bit_reverse = { "~" }
positive = { "+" }
negative = { "-" }
member = { value ~ (static_member | dynamic_member | func_call)* }
static_member = { "." ~ ident }
dynamic_member = { "[" ~ cond ~ "]" }
func_call = { "(" ~ (cond ~ ("," ~ cond)*)? ~ ")" }
spread = { "..." }

// 值
value = {
    "(" ~ cond ~ ")"
    | lit_str
    | lit_number
    | lit_obj
    | lit_arr
    | ident
}

// 字面量字符串
lit_str = ${
    "\"" ~ (lit_str_escaped | lit_str_q)* ~ "\""
    | "'" ~ (lit_str_escaped | lit_str_sq)* ~ "'"
}
lit_str_q = @{ (!"\"" ~ !"\\" ~ ANY)+ }
lit_str_sq = @{ (!"\'" ~ !"\\" ~ ANY)+ }
lit_str_escaped = @{ "\\" ~ ("u" ~ ASCII_DIGIT{4} | "x" ~ ASCII_DIGIT{2} | ANY) }

// 字面量数字
lit_number = ${
    "0x" ~ lit_number_hex
    | "0" ~ lit_number_oct
    | lit_number_dec ~ lit_number_float? ~ lit_number_e?
}
lit_number_hex = @{ ASCII_HEX_DIGIT+ }
lit_number_oct = @{ ASCII_OCT_DIGIT+ }
lit_number_dec = @{ ASCII_DIGIT+ }
lit_number_float = @{ "." ~ ASCII_DIGIT* }
lit_number_e = @{ "e" ~ "-"? ~ ASCII_DIGIT* }

// 字变量对象
lit_obj = { "{" ~ (lit_obj_item ~ ("," ~ lit_obj_item )*)? ~ "}" }
lit_obj_item = {
    ident ~ (":" ~ cond)?
    | lit_str ~ ":" ~ cond
    | spread ~ cond
}
// 字面量数组
lit_arr = { "[" ~ (cond ~ ("," ~ cond)*)? ~ "]" }

// 标识符
ident = ${ (ASCII_ALPHA | "_" | "$") ~ (ASCII_ALPHA | "_" | "$" | ASCII_DIGIT)* }
